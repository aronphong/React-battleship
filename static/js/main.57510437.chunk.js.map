{"version":3,"sources":["components/Board/BoardCells/BoardCell/BoardCell.module.css","containers/Game/Game.module.css","App.module.css","containers/Layout/Layout.module.css","components/Board/BoardCells/BoardCells.module.css","containers/Layout/Layout.js","components/Board/BoardCells/BoardCell/BoardCell.js","components/Board/BoardCells/BoardCells.js","components/Ships/PlaceShips/placeShips.js","containers/Game/Game.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Layout","props","className","styles","Content","children","boardCell","classes","BoardCell","computerPlayer","push","pc","content","hit","miss","join","onClick","clicked","index","boardCells","BoardCells","cells","map","cell","key","attackPosition","placeShips","board","ships","shipBoard","randomPosition","direction","Math","round","random","row","floor","startIndex","checkValidPlacement","placement","shipLength","i","ship","position","length","positionCheck","shipSymbol","SHIPS","name","Game","state","Array","fill","whosTurn","humanTurn","attackHistory","life","isSunk","shipsPlacement","gameStart","every","setState","resetBoard","handleComputerAttack","currentAttackHistory","slice","reverse","latestHitIndex","arrHistory","move","difficulty","directions","j","nextMove","counter","includes","randomMove","handleAttackPosition","computerBoard","currentBoard","currentCellValue","shipSunk","handleAttackHistory","turnSwitch","result","prevProps","this","randomIndex","player","shipsRemain","sunk","Messages","Component","App","computerDifficulty","handleGameTurn","handleGameStart","handleComputerDifficulty","play","Head","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.57510437.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"BoardCell\":\"BoardCell_BoardCell__1Ji5-\",\"hit\":\"BoardCell_hit__3ssIn\",\"miss\":\"BoardCell_miss__zuzml\",\"pc\":\"BoardCell_pc__29EaG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Game\":\"Game_Game__2qp9N\",\"Messages\":\"Game_Messages__3LwEn\",\"sunk\":\"Game_sunk__1CqFP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__16ZpL\",\"Head\":\"App_Head__3lodK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Content\":\"Layout_Content__PrDi6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"BoardCells\":\"BoardCells_BoardCells__1bGQo\"};","import React from 'react'\nimport styles from './Layout.module.css';\n\nconst Layout = (props) => {\n    return (\n        <main className={styles.Content}>\n            {props.children}\n        </main>\n    );\n}\n\nexport default Layout;","import React from 'react';\nimport styles from './BoardCell.module.css';\n\n// assign color to text if hit or miss\nconst boardCell = (props) => {\n\n    let classes = [styles.BoardCell];\n    if (props.computerPlayer === true) {\n        classes.push(styles.pc);\n    }\n    if (props.content === \"X\") {\n        classes.push(styles.hit);\n    }\n    if (props.content === \"M\") {\n        classes.push(styles.miss);\n    }\n\n    return (\n        <div \n        className={classes.join(' ')}\n        onClick={() => props.clicked(props.index)}\n        // data-index={props.index}\n        >\n            {props.content}\n        </div>\n    );\n}\n    \n\nexport default  boardCell;","import React from 'react'\nimport BoardCell from './BoardCell/BoardCell'\nimport styles from './BoardCells.module.css';\n\nconst boardCells = (props) => {\n\n    return (\n        <div className={styles.BoardCells}>\n            {props.cells.map((cell, index) => {\n                return (\n                    <BoardCell\n                    computerPlayer={props.computerPlayer}\n                    content={cell}\n                    index={index} \n                    key={index}\n                    clicked={props.attackPosition}\n                />\n                );\n            })}\n        </div>\n    );\n}\n\nexport default boardCells;","const placeShips = (board, ships) => {\n    let shipBoard = board;\n\n    const randomPosition = () => {\n        const direction = Math.round(Math.random()) === 0 ? 'row':'column';\n        const row = Math.floor(Math.random() * 10);\n        const startIndex = Math.floor(Math.random() * 100);\n        const placement = {direction, row, startIndex};\n        return placement;\n    }\n\n    const checkValidPlacement = (placement, shipLength, board) => {\n        const direction = placement.direction;\n        const startIndex = placement.startIndex;\n\n        if (direction === 'row') {\n            if ((startIndex % 10) > shipLength) {\n                return false;\n            };\n\n            for (let i = 0; i < shipLength; i++) {\n                if (board[startIndex + i] !== \"\") {\n                    return false;\n                };\n            };\n        } else {\n            if ((shipLength * 10 + startIndex) > 99) {\n                return false;\n            }\n            for (let i = 0; i < (shipLength * 10); i+= 10) {\n                if (board[startIndex + i] !== \"\") {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n\n    // eslint-disable-next-line array-callback-return\n    ships.map(ship => {\n        let position = randomPosition();\n        const shipLength = ship.length;\n\n        let positionCheck = checkValidPlacement(position, shipLength, shipBoard);\n            while (positionCheck === false) {\n                position = randomPosition();\n                positionCheck = checkValidPlacement(position, shipLength, shipBoard);\n            };\n\n        if (positionCheck === true && position.direction === 'row') {\n            for (let i = 0; i < shipLength; i++) {\n                shipBoard[position.startIndex + i] = ship.shipSymbol;\n            }\n        } \n        if (positionCheck === true && position.direction === 'column') {\n            for (let i = 0; i < (shipLength * 10); i+=10) {\n                shipBoard[position.startIndex + i] = ship.shipSymbol;\n            }\n        };\n    });\n    return shipBoard;\n}\n\nexport default placeShips;","import React, { Component } from 'react';\nimport styles from './Game.module.css';\nimport {default as Board} from '../../components/Board/BoardCells/BoardCells';\nimport placeShips from '../../components/Ships/PlaceShips/placeShips';\n\nconst SHIPS = [\n    {name: 'Carrier',length: 5, shipSymbol: 'C'},\n    {name: 'Battleship',length: 4, shipSymbol: 'B'},\n    {name: 'Destroyer',length: 3, shipSymbol: 'D'},\n    {name: 'Submarine', length: 3, shipSymbol: 'S'},\n    {name: 'Patrol', length: 2, shipSymbol: 'P'},\n];\n\nclass Game extends Component {\n    state = {\n        cells: Array(100).fill(''),\n        whosTurn: this.props.humanTurn,\n        attackHistory: [],\n        ships: [\n            {\n                name: 'Carrier',\n                life: 5,\n                shipSymbol: 'C',\n                isSunk: false\n            },\n            {\n                name: 'Battleship',\n                life: 4,\n                shipSymbol: 'B',\n                isSunk: false\n            },\n            {\n                name: 'Destroyer',\n                life: 3,\n                shipSymbol: 'D',\n                isSunk: false\n            },\n            {\n                name: 'Submarine',\n                life: 3,\n                shipSymbol: 'S',\n                isSunk: false\n            },\n            {\n                name: 'Patrol Boat',\n                life: 2,\n                shipSymbol: 'P',\n                isSunk: false\n            },\n        ]\n    };\n\n    componentDidUpdate(prevProps) {\n        if (this.props.gameStart !== prevProps.gameStart) {\n            if (this.props.gameStart === true) {\n                this.shipsPlacement();\n            } else {\n                this.resetBoard();\n            }\n            \n        };\n\n        if (this.props.humanTurn !== prevProps.humanTurn) {\n            if (this.props.humanTurn === false && this.props.computerBoard === false) {\n                const randomIndex = this.handleComputerAttack();\n                this.handleAttackPosition(randomIndex);\n            };\n        };\n    }\n\n    // can change to reset placement if wanted\n    shipsPlacement = () => {\n        if (this.props.gameStart === false) {\n            return;\n        }\n\n        const board = [...this.state.cells];\n        if (board.every(cell => cell === '') === false) {\n            return;\n        };\n        const shipBoard = placeShips(board, SHIPS);\n        this.setState({cells: shipBoard});\n    }\n\n    resetBoard = () => {\n        this.setState({cells: Array(100).fill('')})\n    }\n    \n    handleComputerAttack = () => {\n        let currentAttackHistory = this.state.attackHistory.slice().reverse();\n        let latestHitIndex = false;\n        let arrHistory = currentAttackHistory.map(move => move[0]);\n\n        if (this.props.difficulty === 'medium') {\n            for (let i = 0; i < 4; i++) {\n                try {\n                    if (currentAttackHistory[i][1] === 'X' && currentAttackHistory[i][2] === false) {\n                        latestHitIndex = currentAttackHistory[i][0];\n                        break;\n                    }\n                } catch {\n                    continue;\n                };\n            };\n\n            if (latestHitIndex) {\n                // shuffle directions arr\n                let directions = ['left', 'up', 'right', 'down'];\n                for (let i = directions.length - 1; i > 0; i--) {\n                    const j = Math.floor(Math.random() * (i + 1));\n                    [directions[i], directions[j]] = [directions[j], directions[i]];\n                }\n\n                let nextMove = latestHitIndex;\n                let counter = 0;\n\n                while (arrHistory.includes(nextMove)) {\n                    nextMove = latestHitIndex;\n                    if (directions[counter] === 'left') {\n                        nextMove-= 1;\n                    } else if (directions[counter] === 'up') {\n                        nextMove-= 10;\n                    } else if (directions[counter] === 'right') {\n                        nextMove+= 1;\n                    } else if (directions[counter] === 'down') {\n                        nextMove+= 10;\n                    } else {\n                        nextMove = Math.floor(Math.random() * 100);\n                    }\n\n                    if (nextMove < 0 || nextMove > 99) {\n                        nextMove = Math.floor(Math.random() * 100);\n                    }\n                    counter++;\n                }; \n                return nextMove;\n            }\n        }\n\n        // fix logic check / edge cases\n        let randomMove = Math.floor(Math.random() * 100);\n        while (arrHistory.includes(randomMove)) {\n            randomMove = Math.floor(Math.random() * 100);\n        }\n        return randomMove;\n    }\n\n    handleAttackPosition = (index) => {\n        if (this.props.computerBoard === false && this.props.humanTurn === true) {\n            return\n        };\n\n        const currentBoard = [...this.state.cells];\n        if (currentBoard.every(cell => cell === '') === true) {\n            return;\n        };\n\n        let currentCellValue = currentBoard[index];\n        if (currentCellValue === \"\") {\n            currentBoard[index] = \"M\";\n        };\n        if (currentCellValue === \"X\" || currentCellValue === \"M\") {\n            return;\n        }\n\n        let ships = this.state.ships.slice();\n        let shipSunk = false;\n        ships.map(ship => {\n            if (ship.shipSymbol === currentCellValue) {\n                ship.life--;\n                if (ship.life === 0) {\n                    ship.isSunk = true;\n                    shipSunk = true;\n                }\n                currentBoard[index] = \"X\";\n            }\n            return ship;\n        });\n\n        this.handleAttackHistory(index, currentBoard[index], shipSunk);\n        this.props.turnSwitch();\n        this.setState({\n            cells: currentBoard,\n            ships: ships\n        });\n    }\n\n    handleAttackHistory = (index, result, shipSunk) => {\n        let currentAttackHistory = this.state.attackHistory.slice();\n        currentAttackHistory.push([index, result, shipSunk]);\n        this.setState({attackHistory: currentAttackHistory})\n    }\n\n    render() {\n        const player = this.props.computerBoard ? <h1>Computer Board</h1> : <h1>Your Board</h1>;\n\n        let shipsRemain = null;\n        if (this.props.gameStart) {\n            shipsRemain = this.state.ships.slice().map(ship => {\n                return <li \n                        key={ship.name} \n                        className={ship.isSunk ? styles.sunk : null}>\n                            {ship.name}</li>\n            });\n        };\n        \n        return (\n            <div className={styles.Game}>\n                <div className={styles.Messages}>\n                    {player}\n                    <ul>\n                        {shipsRemain}\n                    </ul>\n                </div>\n                <Board\n                cells={this.state.cells}\n                computerPlayer={this.props.computerBoard}\n                attackPosition={this.handleAttackPosition}\n                />\n            </div>\n        );\n    }\n}\n\nexport default Game;\n","import React, { Component } from 'react';\nimport Layout from './containers/Layout/Layout';\nimport Game from './containers/Game/Game';\nimport styles from './App.module.css';\n\nclass App extends Component {\n  state = {\n    gameStart: false,\n    humanTurn: true,\n    computerDifficulty: 'easy'\n  };\n\n  handleGameTurn = () => {\n    this.setState({humanTurn: !this.state.humanTurn})\n  }\n\n  handleGameStart = () => {\n    this.setState({gameStart: !this.state.gameStart})\n  }\n\n  handleComputerDifficulty = () => {\n    if (this.state.gameStart === true) {\n      return;\n    };\n    \n    const difficulty = this.state.computerDifficulty === 'easy' ? 'medium' : 'easy';\n    this.setState({computerDifficulty: difficulty})\n  }\n\n  render() {\n    const play = this.state.gameStart ? 'Reset Board' : 'Start Game';\n\n    return (\n      <div className={styles.App}>\n        <div className={styles.Head}>\n          <button onClick={this.handleGameStart}>{play}</button>\n          <h1>Battleship</h1>\n          <button onClick={this.handleComputerDifficulty}>Difficulty: {this.state.computerDifficulty}</button>\n        </div>\n\n        <Layout>\n        <Game\n            gameStart = {this.state.gameStart}  \n            computerBoard={true} \n            humanTurn={this.state.humanTurn}\n            turnSwitch={this.handleGameTurn}\n          />\n          <Game\n            gameStart = {this.state.gameStart} \n            computerBoard={false}\n            humanTurn={this.state.humanTurn}\n            turnSwitch={this.handleGameTurn}\n            difficulty={this.state.computerDifficulty}\n          />\n          \n        </Layout>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}